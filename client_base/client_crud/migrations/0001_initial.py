# Generated by Django 5.1.1 on 2024-10-16 11:34

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите Имя', max_length=50, verbose_name='Имя')),
                ('surname', models.CharField(help_text='Введите Отчество', max_length=50, verbose_name='Отчество')),
                ('lastname', models.CharField(help_text='Введите Фамилию', max_length=50, verbose_name='Фамилия')),
                ('date_of_birth', models.DateField(help_text='Введите Дату рождения', verbose_name='Дата рождения')),
                ('place_of_birth', models.CharField(help_text='Введите Место рождения', max_length=100, verbose_name='Место рождения')),
                ('passport_number', models.CharField(help_text='Введите Номер паспорта', max_length=6, validators=[django.core.validators.RegexValidator(message='Номер паспорта содержит 6 цифр', regex='^\\d{6}$')], verbose_name='Номер паспорта')),
                ('passport_seria', models.CharField(help_text='Введите Серию паспорта', max_length=4, validators=[django.core.validators.RegexValidator(message='Серия паспорта содержит 4 цифры', regex='^\\d{4}$')], verbose_name='Серия паспорта')),
                ('issued_by', models.CharField(help_text='Введите Место выдачи паспорта', max_length=100, verbose_name='Место выдачи')),
                ('date_of_issue', models.DateField(help_text='Введите дату выдачи паспорта', verbose_name='Дата выдачи')),
                ('department_code', models.CharField(help_text='Введите код подразделения паспорта', max_length=7, validators=[django.core.validators.RegexValidator(message='Код подразделения имеет формат 000-000', regex='^\\d{3}-\\d{3}$')], verbose_name='Код подразделения')),
                ('inn_number', models.CharField(help_text='Введите Номер ИНН', max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='ИНН должен состоять из 12 цифр', regex='^\\d{12}$')], verbose_name='Номер ИНН')),
                ('snils_number', models.CharField(help_text='Введите Номер СНИЛС', max_length=20, verbose_name='Номер СНИЛС')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите тег для клиента', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, help_text='Введите Электронную почту', max_length=100, null=True, verbose_name='Электронная почта')),
                ('phone_number', models.CharField(blank=True, help_text='Введите Номер телефона', max_length=20, null=True, verbose_name='Номер телефона')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='client_crud.person')),
            ],
            options={
                'verbose_name': 'Контакт',
                'verbose_name_plural': 'Контакты',
            },
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_number', models.CharField(max_length=24, verbose_name='Номер счета')),
                ('corr_account', models.CharField(max_length=24, verbose_name='Корр. счет')),
                ('bank_name', models.CharField(max_length=100, verbose_name='Банк получателя')),
                ('bic', models.CharField(max_length=9, verbose_name='БИК')),
                ('inn', models.CharField(max_length=15, verbose_name='ИНН банка')),
                ('kpp', models.CharField(max_length=15, verbose_name='КПП банка')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to='client_crud.person')),
            ],
            options={
                'verbose_name': 'Банковский счет',
                'verbose_name_plural': 'Банковские счета',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(help_text='Введите Город проживания', max_length=50, verbose_name='Город проживания')),
                ('street', models.CharField(blank=True, help_text='Введите Улицу', max_length=50, null=True, verbose_name='Улица')),
                ('house_number', models.CharField(help_text='Введите Номер дома', max_length=10, verbose_name='Номер дома')),
                ('apartment_number', models.CharField(blank=True, help_text='Введите Номер квартиры (если есть)', max_length=10, null=True, verbose_name='Номер квартиры')),
                ('post_index', models.CharField(help_text='Введите Почтовый индекс', max_length=10, validators=[django.core.validators.RegexValidator(message='Индекс должен содержать 6 цифр', regex='^\\d{6}$')], verbose_name='Почтовый индекс')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='address', to='client_crud.person')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адреса',
            },
        ),
        migrations.AddField(
            model_name='person',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Выберете соответсвующий тег', to='client_crud.tag', verbose_name='Теги'),
        ),
    ]
